module DataMapper
  class Engine
    module Arel

      # Arel Gateway is an object wrapping both Arel::Table and Arel::SelectManager
      # providing common API for relation graph nodes
      #
      # A gateway instance can be used to run queries or execute insert/update/delete
      # operations.
      #
      # @example
      #
      #   relation = Arel::Table.new(
      #     :users, Class.new(ActiveRecord::Base) { self.table_name = 'users' }
      #   )
      #   header  = relation.columns
      #   gateway = Engine::Arel::Gateway.new(:users, relation, header)
      #
      #   # iterate over all users
      #   gateway.each { |user_row| # do something here }
      #
      #   # restrict users
      #   gateway.restrict(relation[:name].eq('Piotr')).each { |user_row| # ... }
      #
      #   # insert new user row
      #   gateway.insert(:name => 'Piotr', :age => 29) # returns pk value
      #
      #   # delete users matching given criteria
      #   gateway.delete(:id => 1)
      #
      class Gateway
        include Enumerable

        # Returns name of the wrapped relation
        #
        # @api private
        attr_reader :name

        # Returns header of the wrapped relation
        #
        # @api private
        attr_reader :header

        # Returns wrapped relation. This can be a base relation or a "virtual" one
        #
        # @api private
        attr_reader :relation

        # Initializes a gateway instance
        #
        # @param [Symbol, #to_sym] name
        # @param [::Arel::Table,::Arel::SelectManager] relation
        # @param [Array] header
        #
        # @api private
        def initialize(name, relation, header)
          @relation = relation
          @name     = name.to_sym
          @header   = header
        end

        # Iterates over rows returned by the wrapped relation
        #
        # @api public
        def each(&block)
          return to_enum unless block_given?
          read.each(&block)
          self
        end

        # Returns new gateway instance
        #
        # @api private
        def new(relation, header = @header)
          self.class.new(name, relation, header)
        end

        # Returns restricted relation
        #
        # @api public
        def restrict(*args)
          new(relation.where(*args))
        end

        # Inserts a new row
        #
        # @param [Hash] tuple
        #
        # @api public
        def insert(tuple)
          binds = tuple.to_a.map { |a| [ relation[a.first], a.last ] }
          im    = relation.create_insert

          im.into(relation)
          im.insert(binds)

          connection.insert(im, 'SQL')
        end

        # Deletes a row matching given criteria
        #
        # @api public
        def delete(conditions)
          relation_to_delete = nil
          conditions.each do |key, value|
            relation_to_delete = relation.where(relation[key].eq(value))
          end
          relation_to_delete.delete
        end

        private

        # Executes sql query generated by the wrapped relation
        #
        # @api private
        def read
          connection.execute(to_sql)
        end

        # Generates an sql query
        #
        # @api private
        def to_sql
          relation.project(header.map(&:name).join(', ')).to_sql
        end

        # Returns database connection used by the wrapped relation
        #
        # @api private
        def connection
          relation.engine.connection
        end

      end # class Gateway

    end # module Arel
  end # class Engine
end # module DataMapper
